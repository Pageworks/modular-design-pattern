(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.codewithkyle"],{

/***/ "./node_modules/@codewithkyle/device-manager/DeviceManager.js":
/*!********************************************************************!*\
  !*** ./node_modules/@codewithkyle/device-manager/DeviceManager.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeviceManager = /** @class */ (function () {\n    function DeviceManager(debug, setStatusClasses) {\n        var _this = this;\n        /**\n         * Called when the `touchstart` event fires on an element that has a `js-touch` class.\n         */\n        this.userTouchedElement = function (e) {\n            var target = e.currentTarget;\n            target.setAttribute('data-touching', \"true\");\n        };\n        /**\n         * Called when the `touchend` or `touchcancel` or `touchleave` event(s) fire on\n         * an element with the `js-touch` class.\n         */\n        this.userReleasedTouchedElement = function (e) {\n            var target = e.currentTarget;\n            target.setAttribute('data-touching', \"false\");\n        };\n        /**\n         * Called when the `mouseover` event is fired on the body.\n         * Sets a status class confirming that the user is using a pointer device (mouse).\n         */\n        this.handleMouseEvent = function (e) {\n            _this._body.removeEventListener('mouseover', _this.handleMouseEvent);\n            _this._html.classList.add('is-pointer-device');\n            _this._html.classList.remove('is-not-pointer-device');\n            if (_this._isDebug) {\n                console.log('%c[Device Manager] ' + \"%cUser is using a pointer device\", 'color:#35ffb8', 'color:#eee');\n            }\n        };\n        /**\n         * Called when the `touchstart` event is fired on the body.\n         * Sets a status class confirming that the user is using touch input.\n         */\n        this.handleTouchEvent = function (e) {\n            _this._body.removeEventListener('touchstart', _this.handleTouchEvent);\n            _this._html.classList.add('has-touched');\n            if (_this._isDebug) {\n                console.log('%c[Device Manager] ' + \"%cUser has touched their device\", 'color:#35ffb8', 'color:#eee');\n            }\n        };\n        this._isDebug = (debug) ? debug : false;\n        this._html = document.documentElement;\n        this._body = document.body;\n        if (setStatusClasses) {\n            this.setStatusClasses();\n        }\n        this._trackedElements = [];\n        this.getTouchElements();\n    }\n    /**\n     * Called when the page has changed and `DeviceManager` needs to handle the new/old touch tracked elements.\n     */\n    DeviceManager.prototype.reinit = function () {\n        this.purgeTouchElements();\n        this.getTouchElements();\n    };\n    /**\n     * Get all the elements that require touch tracking if they're not already tracked.\n     */\n    DeviceManager.prototype.getTouchElements = function () {\n        var _this = this;\n        // Do nothing on non-touch devices\n        if (!DeviceManager.supportsTouch) {\n            return;\n        }\n        // Create an array of elements with the `.js-touch` class if they're not already tracked\n        var elements = Array.from(document.body.querySelectorAll('.js-touch:not([data-touch-tracked=\"true\"])'));\n        elements.forEach(function (el) {\n            // Sets tracking attribute\n            el.setAttribute('data-touch-tracked', 'true');\n            // Sets event listeners\n            el.addEventListener('touchstart', _this.userTouchedElement);\n            el.addEventListener('touchend', _this.userReleasedTouchedElement);\n            el.addEventListener('touchleave', _this.userReleasedTouchedElement);\n            el.addEventListener('touchcancel', _this.userReleasedTouchedElement);\n            // Places element in the arrray\n            _this._trackedElements.push(el);\n        });\n    };\n    /**\n     * Grabs all the current touch elements and removes any that are missing in the DOM.\n     */\n    DeviceManager.prototype.purgeTouchElements = function () {\n        // Do nothing on non-touch devices\n        if (!DeviceManager.supportsTouch) {\n            return;\n        }\n        // Check if there are elements to check\n        if (this._trackedElements.length === 0) {\n            return;\n        }\n        var currentElements = Array.from(document.body.querySelectorAll('.js-touch'));\n        var deadElements = [];\n        // Loop through all tracked touch elements\n        for (var i = 0; i < this._trackedElements.length; i++) {\n            var survived = false;\n            // Compare aginst all current touch elements\n            for (var k = 0; k < currentElements.length; k++) {\n                if (this._trackedElements[i] === currentElements[k]) {\n                    survived = true;\n                }\n            }\n            // Prepare dead elements for the purge\n            if (!survived) {\n                deadElements.push(this._trackedElements[i]);\n            }\n        }\n        // Verify we have elements to remove\n        if (deadElements.length !== 0) {\n            // Loop though all the elements we need to remove\n            for (var k = 0; k < deadElements.length; k++) {\n                // Loop through all the current elements\n                for (var i = 0; i < this._trackedElements.length; i++) {\n                    // Check if the current element matches the element marked for death\n                    if (this._trackedElements[i] === deadElements[i]) {\n                        // Remove event listeners\n                        deadElements[i].removeEventListener('touchstart', this.userTouchedElement);\n                        deadElements[i].removeEventListener('touchend', this.userReleasedTouchedElement);\n                        deadElements[i].removeEventListener('touchleave', this.userReleasedTouchedElement);\n                        deadElements[i].removeEventListener('touchcancel', this.userReleasedTouchedElement);\n                        // Get the elements index\n                        var index = this._trackedElements.indexOf(this._trackedElements[i]);\n                        // Splice the array at the index and shift the remaining elements\n                        this._trackedElements.splice(index, 1);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Sets custom status classes on the HTML Document.\n     */\n    DeviceManager.prototype.setStatusClasses = function () {\n        this._html.classList.add('has-js');\n        this._html.classList.remove('has-no-js');\n        if (this._isDebug) {\n            console.log('%c[Device Manager] ' + \"%cSetting status classes\", 'color:#35ffb8', 'color:#eee');\n        }\n        // Listen for basic device event types\n        this._body.addEventListener('mouseover', this.handleMouseEvent);\n        this._body.addEventListener('touchstart', this.handleTouchEvent);\n        // Set a status class if the device supports touch\n        if (DeviceManager.supportsTouch) {\n            this._html.classList.add('is-touch-device');\n            this._html.classList.remove('is-not-touch-device');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cSupports Touch: %c\" + DeviceManager.supportsTouch), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is using the Blink engine\n        if (DeviceManager.isBlinkEngine) {\n            this._html.classList.add('is-blink');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cUsing Blink Engine: %c\" + DeviceManager.isBlinkEngine), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is Chrome\n        if (DeviceManager.isChrome) {\n            this._html.classList.add('is-chrome');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cChrome: %c\" + DeviceManager.isChrome), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is IE 11\n        if (DeviceManager.isIE) {\n            this._html.classList.add('is-ie');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cInternet Explorer: %c\" + DeviceManager.isIE), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is Edge\n        if (DeviceManager.isEdge) {\n            this._html.classList.add('is-edge');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cEdge: %c\" + DeviceManager.isEdge), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is Firefox\n        if (DeviceManager.isFirefox) {\n            this._html.classList.add('is-firefox');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cFirefox: %c\" + DeviceManager.isFirefox), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is Safari\n        if (DeviceManager.isSafari) {\n            this._html.classList.add('is-safari');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cSafari: %c\" + DeviceManager.isSafari), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n        // Sets a status class if the browser is Opera\n        if (DeviceManager.isOpera) {\n            this._html.classList.add('is-opera');\n            if (this._isDebug) {\n                console.log('%c[Device Manager] ' + (\"%cOpera: %c\" + DeviceManager.isOpera), 'color:#35ffb8', 'color:#eee', 'color:#68e5ff');\n            }\n        }\n    };\n    /**\n     * Checks if the browser is Chrome 1 - 71.\n     * @returns `boolean`\n     */\n    DeviceManager.isChrome = (function () {\n        var isChrome = false;\n        // @ts-ignore\n        if (!!window.chrome && (window.StyleMedia === undefined)) {\n            isChrome = true;\n        }\n        return isChrome;\n    })();\n    /**\n     * Checks if the browser is Edge 20+.\n     * @returns `boolean`\n     */\n    DeviceManager.isEdge = (function () {\n        var isEdge = false;\n        // @ts-ignore\n        if (!!window.StyleMedia && !!window.chrome) {\n            isEdge = true;\n        }\n        return isEdge;\n    })();\n    /**\n     * Checks if the browser is Internet Explorer 6 - 11.\n     * @returns `boolean`\n     */\n    DeviceManager.isIE = (function () {\n        var isIE = false;\n        // @ts-ignore\n        if (!!window.MSInputMethodContext && !!document.documentMode && (window.chrome === undefined)) {\n            isIE = true;\n        }\n        return isIE;\n    })();\n    /**\n     * Checks if the browser is Firefox 1+.\n     * @returns `boolean`\n     */\n    DeviceManager.isFirefox = (function () {\n        var isFirefox = false;\n        // @ts-ignore\n        if (typeof InstallTrigger !== 'undefined') {\n            isFirefox = true;\n        }\n        return isFirefox;\n    })();\n    /**\n     * Checks if the browser is Safari 3+.\n     * @returns `boolean`\n     */\n    DeviceManager.isSafari = (function () {\n        var isSafari = false;\n        // @ts-ignore\n        if (/constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification))) {\n            isSafari = true;\n        }\n        return isSafari;\n    })();\n    /**\n     * Checks if the browser is Opera 8+.\n     * @returns `boolean`\n     */\n    DeviceManager.isOpera = (function () {\n        var isOpera = false;\n        // @ts-ignore\n        if ((!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0) {\n            isOpera = true;\n        }\n        return isOpera;\n    })();\n    /**\n     * Checks if the browser is using the Blink Engine.\n     * @see https://en.wikipedia.org/wiki/Blink_(browser_engine)\n     * @returns `boolean`\n     */\n    DeviceManager.isBlinkEngine = (function () {\n        var isBlink = false;\n        // @ts-ignore\n        if ((DeviceManager.isChrome || DeviceManager.isOpera) && !!window.CSS) {\n            isBlink = true;\n        }\n        return isBlink;\n    })();\n    /**\n     * Checks if the browser supports touch input.\n     * @returns `boolean`\n     */\n    DeviceManager.supportsTouch = (function () {\n        var isTouchSupported = false;\n        if (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)) {\n            isTouchSupported = true;\n        }\n        return isTouchSupported;\n    })();\n    return DeviceManager;\n}());\nexports.default = DeviceManager;\n//# sourceMappingURL=DeviceManager.js.map\n\n//# sourceURL=webpack:///./node_modules/@codewithkyle/device-manager/DeviceManager.js?");

/***/ })

}]);